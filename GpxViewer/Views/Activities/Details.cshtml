@model GpxViewer.ViewModels.ActivityDetailViewModel
@using GpxViewer.Helpers

<div class="page-header color">
    <h1>@Model.Activity.Name</h1>

    <dl class="dl-horizontal">
        @if (!string.IsNullOrEmpty(Model.Activity.Description))
        {
            <dt>
                <strong>Description:</strong>
            </dt>
            <dd>
                @Model.Activity.Description
            </dd>
        }
    </dl>
</div>
<div class="row-fluid">
    <div class="span12">
         <div id="chart_div" style="width: 98%; height: 250px;"></div>
    </div>
    </div>
<div class="row-fluid">
    <div class="span6">

        <div class="well">
            <h4>Summary</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.Distance.FormatDistance() mi
                </dd>
                <dt>
                    <strong>Time:</strong>
                </dt>
                <dd>
                    @Model.Activity.ActiveDuration.FormatTime()
                </dd>

                <dt>
                    <strong>Avg Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageSpeed.FormatSpeed() mph
                </dd>
                <dt>
                    <strong>Elevation Gain:</strong>
                </dt>
                <dd>
                    @Model.Activity.ElevationGain.FormatElevation() ft
                </dd>
                @if (Model.Activity.AverageCadence != null)
                {
                    <dt>
                        <strong>Avg Cadence:</strong>
                    </dt>
                    <dd>
                        @Math.Round((double)Model.Activity.AverageCadence, 0) rpm
                    </dd>
                }
                @if (Model.Activity.AverageHeartRate != null && Model.Activity.MaximumHeartRate != null)
                {
                    <dt>
                        <strong>Avg Heartrate:</strong>
                    </dt>
                    <dd>
                        @Math.Round((double)Model.Activity.AverageHeartRate, 0) bpm
                    </dd>
                    <dt>
                        <strong>Max Heartrate:</strong>
                    </dt>
                    <dd>
                        @Math.Round((double)Model.Activity.MaximumHeartRate, 0) bpm
                    </dd>
                }
            </dl>
            <h4>Distance</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.Distance.FormatDistance() mi
                </dd>
                <dt>
                    <strong>Asc Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.AscendingDistance.FormatDistance() mi
                </dd>

                <dt>
                    <strong>Desc Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.DescendingDistance.FormatDistance() mi
                </dd>
                <dt>
                    <strong>Flat Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.FlatDistance.FormatDistance() mi
                </dd>
            </dl>
            <h4>Duration</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.Duration.FormatTime()
                </dd>
                <dt>
                    <strong>Active Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.ActiveDuration.FormatTime()
                </dd>
                <dt>
                    <strong>Asc Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.AscendingDuration.FormatTime()
                </dd>

                <dt>
                    <strong>Desc Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.DescendingDuration.FormatTime()
                </dd>
                <dt>
                    <strong>Flat Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.FlatDuration.FormatTime()
                </dd>
            </dl>
            <h4>Elevation</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Elevation Gain:</strong>
                </dt>
                <dd>
                    @Model.Activity.ElevationGain.FormatElevation() ft
                </dd>
                <dt>
                    <strong>Elevation Loss:</strong>
                </dt>
                <dd>
                    @Model.Activity.ElevationLoss.FormatElevation() ft
                </dd>
                <dt>
                    <strong>Max Elevation:</strong>
                </dt>
                <dd>
                    @Model.Activity.MaximumElevation.FormatElevation() ft
                </dd>

                <dt>
                    <strong>Min Elevation:</strong>
                </dt>
                <dd>
                    @Model.Activity.MinimumElevation.FormatElevation() ft
                </dd>
                <dt>
                    <strong>Elevation Change:</strong>
                </dt>
                <dd>
                    @Model.Activity.ElevationChange.FormatElevation() ft
                </dd>
            </dl>
            <h4>Speed</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Avg Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageSpeed.FormatSpeed() mph
                </dd>
                <dt>
                    <strong>Max Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.MaximumSpeed.FormatSpeed() mph
                </dd>
                <dt>
                    <strong>Avg Asc Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageAscendingSpeed.FormatSpeed() mph
                </dd>

                <dt>
                    <strong>Avg Desc Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageDescendingSpeed.FormatSpeed() mph
                </dd>
                <dt>
                    <strong>Avg Flat Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageFlatSpeed.FormatSpeed() mph
                </dd>
            </dl>
            <h4>Pace</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Avg Pace:</strong>
                </dt>
                <dd>
                    @Model.Activity.AveragePace.FormatPace()  min/mi
                </dd>
                <dt>
                    <strong>Avg Asc Pace:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageAscendingPace.FormatPace()  min/mi
                </dd>

                <dt>
                    <strong>Avg Desc Pace:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageDescendingPace.FormatPace()  min/mi
                </dd>
                <dt>
                    <strong>Avg Flat Pace:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageFlatPace.FormatPace()  min/mi
                </dd>
            </dl>
        </div>

        @Html.ActionLink("Back", "Index", "Activities", null, new { @class = "btn" })

    </div>
    <div class="span6">
        <div class="well">
            <div id="map_canvas" style="height: 500px;"></div>
        </div>
    </div>
    <div class="span6">
        <div class="well">
            <style>
                .gauge_wrapper {
                    display: inline-block;
                    width: 175px;
                }

                .medium_gauge {
                    width: 175px;
                    height: 140px;
                }
            </style>
            <div style="overflow: hidden; text-align: center;">
                <div class="gauge_wrapper">
                    <div id="time_gauge" class="medium_gauge"></div>
                </div>
                <div class="gauge_wrapper">
                    <div id="distance_gauge" class="medium_gauge"></div>
                </div>
                <div class="gauge_wrapper">
                    <div id="speed_gauge" class="medium_gauge"></div>
                </div>
                <div class="gauge_wrapper">
                    <div id="cad_gauge" class="medium_gauge"></div>
                </div>
                <div class="gauge_wrapper">
                    <div id="hr_gauge" class="medium_gauge"></div>
                </div>
            </div>
        </div>
    </div>
     <div class="span6">
        <div class="well">
          
        </div>
    </div>
</div>



@*<h2>Points</h2>

<table class="table table-striped">
    <thead>
        <tr>
            <th>Time</th>
            <th>Latitude</th>
            <th>Longitude</th>
            <th>Elevation</th>
            <th>Distance</th>
            <th>Duration</th>
            <th>Active Duration</th>
            <th>Pace</th>
            <th>Speed</th>
            <th>Cadence</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var point in Model.Activity.Points)
        {
            <tr>
                <td>@point.Time</td>
                <td>@point.Latitude</td>
                <td>@point.Longitude</td>
                <td>@point.Elevation</td>
                <td>@point.Distance</td>
                <td>@point.Duration</td>
                <td>@point.ActiveDuration</td>
                <td>@point.Pace</td>
                <td>@point.Speed</td>
                <td>@point.Cadence</td>

            </tr>
        }

    </tbody>
</table>*@

@section scripts
{
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyBHyd80Vb2I1rUaqH5cZb3lRxy8thve_GM&libraries=geometry&sensor=false"></script>
    <script src="http://code.highcharts.com/highcharts.js"></script>
    <script type="text/javascript">
        var map;

        $(document).ready(function () {
            var gmCenter = new google.maps.LatLng(33.7489, -84.3881);
            var gmMapType = google.maps.MapTypeId.ROADMAP;
            var mapOptions = { center: gmCenter, zoom: 3, mapTypeId: gmMapType };
            map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);
            displayOnMap();

            var gpxData = @Html.Raw(Model.GpxJsonData);
            

            var chart_data = {elevation: [], speed: [], cadence: [], time: []};
			


            for(var time in gpxData) {
                chart_data.time.push(gpxData[time].Duration);
                chart_data.elevation.push(gpxData[time]['Data'].ele);
                chart_data.speed.push(gpxData[time]['Data'].speed);
                chart_data.cadence.push(gpxData[time]['Data'].cad);
            }

            $('#chart_div').highcharts({
                chart: {zoomType: 'x'},
                title: {text: ''},
                subtitle: {text: ''},
                xAxis: [{
                    categories: chart_data.time,
                    labels: {step: 200},
                }],
                yAxis: [
					{ // Primary yAxis
					    labels: {
					        formatter: function() {return this.value +'';},
					        style: {color: '#89A54E'}
					    },
					    title: {
					        text: 'Cadence rpm',
					        style: {color: '#89A54E'}
					    },
					    min: 0,
					    max: @Model.Activity.Points.Max(p => p.Cadence),
					    opposite: true
			
					}, 
					{ // Secondary yAxis
					    gridLineWidth: 0,
					    title: {
					        text: 'Elevation',
					        style: {color: '#CCCCCC'}
					    },
					    labels: {
					        formatter: function(){return this.value +'m';},
					        style: {color: '#CCCCCC'}
					    }, 
					    min: @Model.Activity.MinimumElevation,
					    max: @Model.Activity.MaximumElevation,
			
					}, 
					{ // Tertiary yAxis
					    gridLineWidth: 0,
					    title: {
					        text: 'Speed km/h',
					        style: {color: '#36a6d5'}
					    },
					    labels: {
					        formatter: function(){return this.value +'';},
					        style: {color: '#36a6d5'}
					    },
					    min: 0,
					    max: @Model.Activity.MaximumSpeed,
					    opposite: false
					}
                ],
                legend: {enabled: false},
                series: [
					{
					    name: 'Elevation',
					    color: '#CCCCCC',
					    fillOpacity: 0.1,
					    type: 'areaspline',
					    yAxis: 1,
					    data: chart_data.elevation,
					    tooltip: {valueSuffix: ' m'},
					    marker: {enabled: false, states:{hover: {enabled:false}}},
					    states: {hover: {enabled: false}}
					}, 
					{
					    name: 'Speed',
					    color: '#36a6d5',
					    yAxis: 2,
					    data: chart_data.speed,
					    marker: {enabled: false, states:{hover: {enabled:false}}},
					    states: {hover: {enabled: false}},
					    tooltip: {valueSuffix: ' km/h'}
			
					}, 
					{
					    name: 'Cadence',
					    color: '#89A54E',
					    data: chart_data.cadence,
					    tooltip: {valueSuffix: ' rpm'},
					    marker: {enabled: false, states:{hover: {enabled:false}}},
					    states: {hover: {enabled: false}}
						
					},
					{
					    name: 'HR',
					    color: '#FF0000',
					    data: chart_data.hr,
					    tooltip: {valueSuffix: ' bpm'},
					    marker: {enabled: false, states:{hover: {enabled:false}}},
					    states: {hover: {enabled: false}}
					}
                ]
            });
         


            @*var hr_gauge = new JustGage({ id: "hr_gauge", value: 0, min: 0, max: @Model.Activity.MaximumHeartRate, title: "HR", label: "bpm", formatter: null, gaugeWidthScale: 0.5 });*@
            var cad_gauge = new JustGage({ id: "cad_gauge", value: 0, min: 0, max: @Model.Activity.Points.Max(p => p.Cadence), title: "Cadence", label: "rpm", formatter: null, gaugeWidthScale: 0.5 });
            var speed_gauge = new JustGage({ id: "speed_gauge", value: 0, min: 0, max: @Model.Activity.MaximumSpeed.FormatSpeed(), title: "Speed", label: "mph", formatter: null, gaugeWidthScale: 0.5 });
            
            var time_gauge = new JustGage({
                id: "time_gauge",
                value: 0,
                min: 0,
                max: 6391,
                title: "Time",
                label: "h:mm:ss",
                formatter: function(totalSeconds) {
                    alert(totalSeconds);
                    var hours = Math.floor(totalSeconds / 3600);
                    totalSeconds %= 3600;
                    var minutes = Math.floor(totalSeconds / 60);
                    var seconds = Math.floor(totalSeconds % 60);

                    if (hours < 10) {
                        hours = "0" + hours;
                    }
                    if (minutes < 10) {
                        minutes = "0" + minutes;
                    }
                    if (seconds < 10) {
                        seconds = "0" + seconds;
                    }
                    var time = hours + ':' + minutes + ':' + seconds;
                    return time;
                },
                gaugeWidthScale: 0.5,
                levelColorsGradient: false,
                levelColors: ['#AAAAAA']
            });
            var distance_gauge = new JustGage({id: "distance_gauge", value: 0, min: 0, max: @Model.Activity.Distance.FormatDistance(), title: "Distance",  label: "mi", formatter: null, gaugeWidthScale: 0.5,  levelColorsGradient: false, levelColors:['#AAAAAA']}); 

            time_gauge.refresh(@Model.Activity.Points.FirstOrDefault().ActiveDuration);

        });

        function displayOnMap() {
            var decodedPath = google.maps.geometry.encoding.decodePath('@Model.Polyline');
            var pathOptions = { path: decodedPath, strokeColor: "#FF0000", strokeOpacity: 0.5, strokeWeight: 5 };
            var trackPath = new google.maps.Polyline(pathOptions);
            trackPath.setMap(map);
            map.fitBounds(calcBounds(trackPath));

        }

        function calcBounds(trackPath) {
            var b = new google.maps.LatLngBounds();
            var gmPath = trackPath.getPath();
            var pathLength = gmPath.getLength();
            var i = [0, (pathLength / 3).toFixed(0), (pathLength / 3).toFixed(0) * 2];
            b.extend(gmPath.getAt(i[0]));
            b.extend(gmPath.getAt(i[1]));
            b.extend(gmPath.getAt(i[2]));
            return b;
        }



    </script>
}
