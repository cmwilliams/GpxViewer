@model GpxViewer.ViewModels.ActivityDetailViewModel
@using GpxViewer.Helpers

<div class="page-header color" style="margin: 0;">
    <h1>@Model.Activity.Name</h1>
</div>
<div class="row-fluid">
    <div class="span6">
        <div class="well">
            <h4>Summary</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.Distance.FormatDistance() mi
                </dd>
                <dt>
                    <strong>Time:</strong>
                </dt>
                <dd>
                    @Model.Activity.ActiveDuration.FormatTime()
                </dd>

                <dt>
                    <strong>Avg Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageSpeed.FormatSpeed() mph
                </dd>
                <dt>
                    <strong>Elevation Gain:</strong>
                </dt>
                <dd>
                    @Model.Activity.ElevationGain.FormatElevation() ft
                </dd>
                @if (Model.Activity.AverageCadence != null)
                {
                    <dt>
                        <strong>Avg Cadence:</strong>
                    </dt>
                    <dd>
                        @Math.Round((double)Model.Activity.AverageCadence, 0) rpm
                    </dd>
                }
                @if (Model.Activity.AverageHeartRate != null && Model.Activity.MaximumHeartRate != null)
                {
                    <dt>
                        <strong>Avg Heartrate:</strong>
                    </dt>
                    <dd>
                        @Math.Round((double)Model.Activity.AverageHeartRate, 0) bpm
                    </dd>
                    <dt>
                        <strong>Max Heartrate:</strong>
                    </dt>
                    <dd>
                        @Math.Round((double)Model.Activity.MaximumHeartRate, 0) bpm
                    </dd>
                }
            </dl>
            <h4>Distance</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.Distance.FormatDistance() mi
                </dd>
                <dt>
                    <strong>Asc Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.AscendingDistance.FormatDistance() mi
                </dd>

                <dt>
                    <strong>Desc Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.DescendingDistance.FormatDistance() mi
                </dd>
                <dt>
                    <strong>Flat Distance:</strong>
                </dt>
                <dd>
                    @Model.Activity.FlatDistance.FormatDistance() mi
                </dd>
            </dl>
            <h4>Duration</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.Duration.FormatTime()
                </dd>
                <dt>
                    <strong>Active Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.ActiveDuration.FormatTime()
                </dd>
                <dt>
                    <strong>Asc Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.AscendingDuration.FormatTime()
                </dd>

                <dt>
                    <strong>Desc Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.DescendingDuration.FormatTime()
                </dd>
                <dt>
                    <strong>Flat Duration:</strong>
                </dt>
                <dd>
                    @Model.Activity.FlatDuration.FormatTime()
                </dd>
            </dl>
        </div>

    </div>


    <div class="span6">
        <div class="well">

            <h4>Elevation</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Elevation Gain:</strong>
                </dt>
                <dd>
                    @Model.Activity.ElevationGain.FormatElevation() ft
                </dd>
                <dt>
                    <strong>Elevation Loss:</strong>
                </dt>
                <dd>
                    @Model.Activity.ElevationLoss.FormatElevation() ft
                </dd>
                <dt>
                    <strong>Max Elevation:</strong>
                </dt>
                <dd>
                    @Model.Activity.MaximumElevation.FormatElevation() ft
                </dd>

                <dt>
                    <strong>Min Elevation:</strong>
                </dt>
                <dd>
                    @Model.Activity.MinimumElevation.FormatElevation() ft
                </dd>
                <dt>
                    <strong>Elevation Change:</strong>
                </dt>
                <dd>
                    @Model.Activity.ElevationChange.FormatElevation() ft
                </dd>
            </dl>
            <h4>Speed</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Avg Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageSpeed.FormatSpeed() mph
                </dd>
                <dt>
                    <strong>Max Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.MaximumSpeed.FormatSpeed() mph
                </dd>
                <dt>
                    <strong>Avg Asc Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageAscendingSpeed.FormatSpeed() mph
                </dd>

                <dt>
                    <strong>Avg Desc Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageDescendingSpeed.FormatSpeed() mph
                </dd>
                <dt>
                    <strong>Avg Flat Speed:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageFlatSpeed.FormatSpeed() mph
                </dd>
            </dl>
            <h4>Pace</h4>
            <dl class="dl-horizontal">
                <dt>
                    <strong>Avg Pace:</strong>
                </dt>
                <dd>
                    @Model.Activity.AveragePace.FormatPace()  min/mi
                </dd>
                <dt>
                    <strong>Avg Asc Pace:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageAscendingPace.FormatPace()  min/mi
                </dd>

                <dt>
                    <strong>Avg Desc Pace:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageDescendingPace.FormatPace()  min/mi
                </dd>
                <dt>
                    <strong>Avg Flat Pace:</strong>
                </dt>
                <dd>
                    @Model.Activity.AverageFlatPace.FormatPace()  min/mi
                </dd>
            </dl>
        </div>

    </div>
</div>
<div class="row-fluid">
    <div class="well">
        <div id="elevationChart" style="width: 98%; height: 250px;"></div>
    </div>
</div>
<div class="row-fluid">

    <div class="well">
        <div id="map_canvas" style="height: 500px;"></div>
    </div>


</div>





@section scripts
{
    <script type="text/javascript" src="http://maps.googleapis.com/maps/api/js?key=AIzaSyBHyd80Vb2I1rUaqH5cZb3lRxy8thve_GM&libraries=geometry&sensor=false"></script>
    <script src="http://code.highcharts.com/highcharts.js"></script>
    <script type="text/javascript">
        var map;

        $(document).ready(function() {
            var gmCenter = new google.maps.LatLng(33.7489, -84.3881);
            var gmMapType = google.maps.MapTypeId.ROADMAP;
            var mapOptions = { center: gmCenter, zoom: 3, mapTypeId: gmMapType };
            map = new google.maps.Map(document.getElementById('map_canvas'), mapOptions);
            displayOnMap();

            var gpxData = @Html.Raw(Model.GpxJsonData);
            var chartData = { elevation: [], speed: [], cadence: [], time: [] };
            for (var time in gpxData) {
                chartData.time.push(gpxData[time].Duration);
                chartData.elevation.push(gpxData[time]['Data'].ele);
                chartData.speed.push(gpxData[time]['Data'].speed);
                chartData.cadence.push(gpxData[time]['Data'].cad);
            }

            $('#elevationChart').highcharts({
                chart: { zoomType: 'x' },
                title: { text: '' },
                subtitle: { text: '' },
                xAxis: [{
                    categories: chartData.time,
                    labels: { step: 200 },
                }],
                yAxis: [
                    {
                        labels: {
                            formatter: function() { return this.value + ''; },
                            style: { color: '#89A54E' }
                        },
                        title: {
                            text: 'Cadence rpm',
                            style: { color: '#89A54E' }
                        },
                        min: @Model.Activity.MinimumCadence,
                        max: @Model.Activity.MaximumCadence,
                        opposite: true
                    }, {
                        gridLineWidth: 0,
                        title: {
                            text: 'Elevation',
                            style: { color: '#228400' }
                        },
                        labels: {
                            formatter: function() { return this.value + 'ft'; },
                            style: { color: '#228400' }
                        },
                        min: @Model.Activity.MinimumElevation.FormatElevation(),
                        max: @Model.Activity.MaximumElevation.FormatElevation()
                    },
                    {
                        gridLineWidth: 0,
                        title: {
                            text: 'Speed mi/h',
                            style: { color: '#36a6d5' }
                        },
                        labels: {
                            formatter: function() { return this.value + ''; },
                            style: { color: '#36a6d5' }
                        },
                        min: 0,
                        max: @Model.Activity.MaximumSpeed.FormatSpeed(),
                        opposite: false
                    }
                ],
                legend: {
                    enabled: true,
                    title: {
                        text: '<span style="font-size: 9px; color: #666; font-weight: normal">(Click each to hide)</span>',
                        style: {
                            fontStyle: 'italic'
                        }
                    }
                },
                series: [
                    {
                        name: 'Elevation',
                        color: '#228400',
                        fillOpacity: 0.2,
                        type: 'areaspline',
                        yAxis: 1,
                        data: chartData.elevation,
                        tooltip: { valueSuffix: ' ft' },
                        marker: { enabled: false, states: { hover: { enabled: false } } },
                        states: { hover: { enabled: false } }
                    },
                    {
                        name: 'Speed',
                        color: '#0077e6',
                        fillOpacity: 0.2,
                        type: 'areaspline',
                        yAxis: 2,
                        data: chartData.speed,
                        marker: { enabled: false, states: { hover: { enabled: false } } },
                        states: { hover: { enabled: false } },
                        tooltip: { valueSuffix: ' mi/h' }
                    },
                    {
                        name: 'Cadence',
                        color: '#cc6600',
                        fillOpacity: 0.2,
                        type: 'areaspline',
                        data: chartData.cadence,
                        tooltip: { valueSuffix: ' rpm' },
                        marker: { enabled: false, states: { hover: { enabled: false } } },
                        states: { hover: { enabled: false } }
                    },
                    {
                        name: 'HR',
                        color: '#FF0000',
                        fillOpacity: 0.2,
                        type: 'areaspline',
                        data: chartData.hr,
                        tooltip: { valueSuffix: ' bpm' },
                        marker: { enabled: false, states: { hover: { enabled: false } } },
                        states: { hover: { enabled: false } }
                    }
                ]
            });


        });

        function displayOnMap() {
            var decodedPath = google.maps.geometry.encoding.decodePath('@Model.Polyline');
            var pathOptions = { path: decodedPath, strokeColor: "#FF0000", strokeOpacity: 0.5, strokeWeight: 5 };
            var trackPath = new google.maps.Polyline(pathOptions);
            trackPath.setMap(map);
            map.fitBounds(calcBounds(trackPath));

        }

        function calcBounds(trackPath) {
            var b = new google.maps.LatLngBounds();
            var gmPath = trackPath.getPath();
            var pathLength = gmPath.getLength();
            var i = [0, (pathLength / 3).toFixed(0), (pathLength / 3).toFixed(0) * 2];
            b.extend(gmPath.getAt(i[0]));
            b.extend(gmPath.getAt(i[1]));
            b.extend(gmPath.getAt(i[2]));
            return b;
        }

    </script>
    }
